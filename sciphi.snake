"""
Explanation of wildcards:

dataType: input data types, e.g., no CNVs, including CNVs, excluding CNVs, etc.
datasetName: simulated dataset names, e.g., 0001, 0002, 0003...
"""


include: "scripts/constants.py"
include: "scripts/utils.py"


#########################################################
#              Get categories of wildcards              #
#########################################################

SIMUDATASETNAMES = get_dataset_names(SIMUSNVSITESDIR)
SIMUDATATYPES = get_data_types(
    config["benchmark"]["simulatedDataTypes"],
    config["benchmark"]["simulation"]["dataTypes"]["CNVTypes"]
)
        

########################################################
#                        SCIPHI                        #
########################################################

# Rule: run SCIPHI
rule runSciphi:
    input: 
        flagFile=SIMUDATATYPESDIR + "DONE_FLAG",
        mpileupFile=SIMUDATATYPESDIR + "{dataType}/{datasetName}/read_counts" + config["benchmark"]["simulation"]["MPileUpDataSuf"],
        bamFileNames=SIMUSCIPHIDIR + config["benchmark"]["simulation"]["bamFileNamesWithoutNormal"]
    output:
        vcf=protected(SCIPHIDIR + "{dataType}/{datasetName}/" + config["benchmark"]["simulation"]["sciphiFilePre"] + ".vcf"),
        model=protected(SCIPHIDIR + "{dataType}/{datasetName}/" + config["benchmark"]["simulation"]["sciphiFilePre"] + ".params.txt"),
        muProbs=protected(SCIPHIDIR + "{dataType}/{datasetName}/" + config["benchmark"]["simulation"]["sciphiFilePre"] + ".probs"),
        tree=protected(SCIPHIDIR + "{dataType}/{datasetName}/" + config["benchmark"]["simulation"]["sciphiFilePre"] + "/best_index/tree.gv"),
        readCounts=protected(SCIPHIDIR + "{dataType}/{datasetName}/" + config["benchmark"]["simulation"]["sciphiFilePre"] + "/best_index/nuc.tsv")
    params:
        sciphi=config["tools"]["sciphi"],
        seed=config["fineTune"]["sciphi"]["seed"],
        loops=config["fineTune"]["sciphi"]["loops"],
        prefix1=SCIPHIDIR + "{dataType}/{datasetName}/",
        prefix2=config["benchmark"]["simulation"]["sciphiFilePre"]
    benchmark:
        repeat(EFFICIENCYSCIPHIDIR + "{dataType}/{datasetName}.tsv", config["benchmark"]["efficiency"]["repetition"])
    shell:
        "{params.sciphi} "
        "--cwm 2 "
        "--lz 1 "
        "-t s "
        "-l {params.loops} "
        "--seed {params.seed} "
        "--in {input.bamFileNames} "
        "-o {params.prefix1}{params.prefix2} "
        "{input.mpileupFile} "
        "&> {params.prefix1}cancer.out"

# Rule: convert trees from SCIPHI to NEXUS format
rule convertSciphiTrees:
    input: 
        SCIPHIDIR + "{dataType}/{datasetName}/" + config["benchmark"]["simulation"]["sciphiFilePre"] + "/best_index/tree.gv"
    output: 
        protected(SCIPHIDIR + "{dataType}/{datasetName}/" + config["benchmark"]["simulation"]["sciphiFilePre"] + "/best_index/tree.nexus")
    params:
        leafNames=SIMUSCIPHIDIR + config["benchmark"]["simulation"]["bamFileNamesWithoutNormal"]
    shell: 
        "python scripts/convert_gv_2_nexus.py "
        "--leafNames {params.leafNames} "
        "--output {output} "
        "{input}"

# Rule: get variant calling information from SCIPHI
rule getSciphiVarInfo:
    input:
        vcf=SCIPHIDIR + "{dataType}/{datasetName}/" + config["benchmark"]["simulation"]["sciphiFilePre"] + ".vcf",
        muProbs=SCIPHIDIR + "{dataType}/{datasetName}/" + config["benchmark"]["simulation"]["sciphiFilePre"] + ".probs"
    output:
        cellNames=protected(SCIPHIDIR + "{dataType}/{datasetName}/post_processed/" + config["benchmark"]["simulation"]["sciphiFilePre"] + ".cell_names"),
        lociInfo=protected(SCIPHIDIR + "{dataType}/{datasetName}/post_processed/" + config["benchmark"]["simulation"]["sciphiFilePre"] + ".loci_info"),
        genotypes=protected(SCIPHIDIR + "{dataType}/{datasetName}/post_processed/" + config["benchmark"]["simulation"]["sciphiFilePre"] + ".genotypes"),
        ternary=protected(SCIPHIDIR + "{dataType}/{datasetName}/post_processed/" + config["benchmark"]["simulation"]["sciphiFilePre"] + ".ternary"),
        genotypeProbs=protected(SCIPHIDIR + "{dataType}/{datasetName}/post_processed/" + config["benchmark"]["simulation"]["sciphiFilePre"] + ".genotype_probs"),
        sifitData=protected(SCIPHIDIR + "{dataType}/{datasetName}/post_processed/" + config["benchmark"]["simulation"]["sciphiFilePre"] + ".sifit_data"),
        sifitCellNames=protected(SCIPHIDIR + "{dataType}/{datasetName}/post_processed/" + config["benchmark"]["simulation"]["sciphiFilePre"] + ".sifit_cell_names")
    params:
        prefix=SCIPHIDIR + "{dataType}/{datasetName}/post_processed/" + config["benchmark"]["simulation"]["sciphiFilePre"]
    shell:
        "python scripts/extract_info_from_vcf.py "
        "--mode sciphi "
        "--prefix {params.prefix} "
        "--probs {input.muProbs} "
        "--sifit t "
        "{input.vcf}"

# Rule: merge SNV sites with identical chromosome label and position
rule mergeSciphiSNVs:
    input:
        lociInfo=SCIPHIDIR + "{dataType}/{datasetName}/post_processed/" + config["benchmark"]["simulation"]["sciphiFilePre"] + ".loci_info",
        ternary=SCIPHIDIR + "{dataType}/{datasetName}/post_processed/" + config["benchmark"]["simulation"]["sciphiFilePre"] + ".ternary"
    output:
        lociInfo=protected(SCIPHIDIR + "{dataType}/{datasetName}/post_processed/" + config["benchmark"]["simulation"]["sciphiFilePre"] + "_merged.loci_info"),
        ternary=protected(SCIPHIDIR + "{dataType}/{datasetName}/post_processed/" + config["benchmark"]["simulation"]["sciphiFilePre"] + "_merged.ternary")
    params:
        prefix=SCIPHIDIR + "{dataType}/{datasetName}/post_processed/" + config["benchmark"]["simulation"]["sciphiFilePre"] + "_merged"
    shell:
        "python scripts/merge_duplicate_lines.py "
        "--loci {input.lociInfo} "
        "--ternary {input.ternary} "
        "--prefix {params.prefix}"


########################################################
#               Gather trees from SCIPHI               #
########################################################

# Rule: gather inferred trees from SCIPHI
rule gatherSciphiTrees:
    input:        
        inferredTrees = expand(SCIPHIDIR + "{dataType}/{datasetName}/" + config["benchmark"]["simulation"]["sciphiFilePre"] + "/best_index/tree.nexus", dataType=SIMUDATATYPES, datasetName=SIMUDATASETNAMES),
        trueTrees = expand(SIMUCONVERTEDTRUETREEDIR + config["benchmark"]["simulation"]["treesWithTrunkWithoutNormalDir"] + config["benchmark"]["simulation"]["treesPre"] + ".{datasetName}", datasetName=SIMUDATASETNAMES)
    output:
        protected(ANALYSISTREECOMPDIR + "from_sciphi.tsv")
    params:
        datasetNames=SIMUDATASETNAMES,
        trueTreesDir=SIMUCONVERTEDTRUETREEDIR + config["benchmark"]["simulation"]["treesWithTrunkWithoutNormalDir"],
        trueTreesPre=config["benchmark"]["simulation"]["treesPre"],
        tool="sciphi",
        snvType=config["benchmark"]["analysis"]["candidateSNVs"],
        toolSetup=None,
        fineTuneType=None,
        dataType=SIMUDATATYPES,
        cellNum=config["benchmark"]["analysis"]["cellNum"],
        covMean=config["benchmark"]["analysis"]["covMean"],
        covVariance=config["benchmark"]["analysis"]["covVariance"],
        effSeqErrRate=config["benchmark"]["analysis"]["effSeqErrRate"],
        adoRate=config["benchmark"]["analysis"]["adoRate"],
        deletionRate=config["benchmark"]["analysis"]["deletionRate"],
        insertionRate=config["benchmark"]["analysis"]["insertionRate"]
    script:
        "scripts/gather_inferred_trees_part.py"


#######################################################
#              Get estimates from SCIPHI              #
#######################################################

# Rule: get parameter estimates from SCIPHI
rule getSciphiParams:
    input: 
        expand(SCIPHIDIR + "{dataType}/{datasetName}/" + config["benchmark"]["simulation"]["sciphiFilePre"] + ".params.txt", dataType=SIMUDATATYPES, datasetName=SIMUDATASETNAMES)
    output: 
        protected(ANALYSISPARAMSDIR + "from_sciphi.tsv")
    params:
        cellNum=config["benchmark"]["analysis"]["cellNum"],
        covMean=config["benchmark"]["analysis"]["covMean"],
        covVariance=config["benchmark"]["analysis"]["covVariance"],
        datasetNames=SIMUDATASETNAMES,
        tool="sciphi",
        snvType=config["benchmark"]["analysis"]["candidateSNVs"],
        toolSetup=None,
        fineTuneType=None,
        dataType=SIMUDATATYPES,
        estimatesType=config["benchmark"]["analysis"]["estimatesTypeSciphi"]
    script:
        "scripts/get_param_estimates_sciphi.py"


#######################################################
#       Get variant calling results from SCIPHI       #
#######################################################

# Rule: gather variant calling results from SCIPHI
rule gatherSciphiVarResults:
    input: 
        cellNames=expand(SCIPHIDIR + "{dataType}/{datasetName}/post_processed/" + config["benchmark"]["simulation"]["sciphiFilePre"] + ".cell_names", dataType=SIMUDATATYPES, datasetName=SIMUDATASETNAMES),
        lociInfo=expand(SCIPHIDIR + "{dataType}/{datasetName}/post_processed/" + config["benchmark"]["simulation"]["sciphiFilePre"] + "_merged.loci_info", dataType=SIMUDATATYPES, datasetName=SIMUDATASETNAMES),
        genotypes=expand(SCIPHIDIR + "{dataType}/{datasetName}/post_processed/" + config["benchmark"]["simulation"]["sciphiFilePre"] + ".genotypes", dataType=SIMUDATATYPES, datasetName=SIMUDATASETNAMES),
        ternary=expand(SCIPHIDIR + "{dataType}/{datasetName}/post_processed/" + config["benchmark"]["simulation"]["sciphiFilePre"] + "_merged.ternary", dataType=SIMUDATATYPES, datasetName=SIMUDATASETNAMES),
        genotypeProbs=expand(SCIPHIDIR + "{dataType}/{datasetName}/post_processed/" + config["benchmark"]["simulation"]["sciphiFilePre"] + ".genotype_probs", dataType=SIMUDATATYPES, datasetName=SIMUDATASETNAMES),
        trueCellNames=SIMUTUMORCELLNAMES,
        trueSNVSites=expand(SIMUDATATYPESDIR + "{dataType}/{datasetName}/" + config["benchmark"]["simulation"]["trueSNVSitesNamesPre"], dataType=SIMUDATATYPES, datasetName=SIMUDATASETNAMES),
        trueSNVGenotypesNU=expand(SIMUDATATYPESDIR + "{dataType}/{datasetName}/" + config["benchmark"]["simulation"]["trueSNVGenotypesNUPre"], dataType=SIMUDATATYPES, datasetName=SIMUDATASETNAMES),
        trueSNVGenotypesTer=expand(SIMUDATATYPESDIR + "{dataType}/{datasetName}/" + config["benchmark"]["simulation"]["trueSNVGenotypesTerPre"] + '.simple', dataType=SIMUDATATYPES, datasetName=SIMUDATASETNAMES)
    output: 
        protected(ANALYSISVARCALLDIR + "from_sciphi.tsv")
    params:
        forSieve=False,
        mergedDuplicateLines=False,
        datasetNames=SIMUDATASETNAMES,
        tool="sciphi",
        snvType=config["benchmark"]["analysis"]["candidateSNVs"],
        toolSetup=None,
        fineTuneType=None,
        dataType=SIMUDATATYPES,
        cellNum=config["benchmark"]["analysis"]["cellNum"],
        covMean=config["benchmark"]["analysis"]["covMean"],
        covVariance=config["benchmark"]["analysis"]["covVariance"],
        effSeqErrRate=config["benchmark"]["analysis"]["effSeqErrRate"],
        adoRate=config["benchmark"]["analysis"]["adoRate"],
        deletionRate=config["benchmark"]["analysis"]["deletionRate"],
        insertionRate=config["benchmark"]["analysis"]["insertionRate"]
    script:
        "scripts/gather_variant_calling_results_part.py"


########################################################
#        Gather the number of sites from SCIPHI        #
########################################################

# Rule: gather the number of candidate variant sites as input to SIEVE
rule gatherSciphiSitesInfo:
    input:
        expand(SCIPHIDIR + "{dataType}/{datasetName}/" + config["benchmark"]["simulation"]["sciphiFilePre"] + "/best_index/nuc.tsv", dataType=SIMUDATATYPES, datasetName=SIMUDATASETNAMES)
    output:
        protected(ANALYSISSITESINFODIR + "from_sciphi.tsv")
    params:
        datasetNames=SIMUDATASETNAMES,
        tool="sciphi",
        snvType=config["benchmark"]["analysis"]["candidateSNVs"],
        toolSetup=None,
        fineTuneType=None,
        dataType=SIMUDATATYPES,
        cellNum=config["benchmark"]["analysis"]["cellNum"],
        covMean=config["benchmark"]["analysis"]["covMean"],
        covVariance=config["benchmark"]["analysis"]["covVariance"],
        effSeqErrRate=config["benchmark"]["analysis"]["effSeqErrRate"],
        adoRate=config["benchmark"]["analysis"]["adoRate"],
        deletionRate=config["benchmark"]["analysis"]["deletionRate"],
        insertionRate=config["benchmark"]["analysis"]["insertionRate"]
    script:
        "scripts/gather_sites_info_sciphi.py"

