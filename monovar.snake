"""
Explanation of wildcards:

dataType: input data types, e.g., no CNVs, including CNVs, excluding CNVs, etc.
datasetName: simulated dataset names, e.g., 0001, 0002, 0003...
"""


include: "scripts/constants.py"
include: "scripts/utils.py"


#########################################################
#              Get categories of wildcards              #
#########################################################

SIMUDATASETNAMES = get_dataset_names(SIMUSNVSITESDIR)
SIMUDATATYPES = get_data_types(
    config["benchmark"]["simulatedDataTypes"],
    config["benchmark"]["simulation"]["dataTypes"]["CNVTypes"]
)


#######################################################
#                MONOVAR - True params                #
#######################################################

# Rule: run MOVONAR with TRUE parameters
rule runMonovarWithTrueParams:
    input:
        flagFile=SIMUDATATYPESDIR + "DONE_FLAG",
        mpileupFile=SIMUDATATYPESDIR + "{dataType}/{datasetName}/read_counts" + config["benchmark"]["simulation"]["MPileUpDataSuf"],
        refFile=SIMURAWDATADIR + "{datasetName}/" + config["benchmark"]["simulation"]["refGenomeData"],
        bamFileNames=SIMUMONOVARDIR + config["benchmark"]["simulation"]["bamFileNamesWithoutNormal"]
    output:
        protected(MONOVARTRUEPARAMSDIR + "{dataType}/{datasetName}/monovar.vcf")
    params:
        fpPrior=config["benchmark"]["analysis"]["effSeqErrRate"],
        fnPrior=config["benchmark"]["analysis"]["adoRate"],
        prefix=MONOVARTRUEPARAMSDIR + "{dataType}/{datasetName}/"
    threads:
        config["fineTune"]["monovar"]["threads"]
    conda:
        "scripts/envs/monovar.yaml"
    benchmark:
        repeat(EFFICIENCYMONOVARDIR + "{dataType}/{datasetName}.tsv", config["benchmark"]["efficiency"]["repetition"])
    shell:
        "cat {input.mpileupFile} | "
        "monovar "
        "-p {params.fpPrior} "
        "-a {params.fnPrior} "
        "-t 0.05 "
        "-m {threads} "
        "-f {input.refFile} "
        "-b {input.bamFileNames} "
        "-o {params.prefix}monovar.vcf"

# Rule: filter VCF results from MONOVAR with TRUE parameters
rule filterMonovarVarInfoTrueParams:
    input:
        MONOVARTRUEPARAMSDIR + "{dataType}/{datasetName}/monovar.vcf"
    output:
        gz=protected(MONOVARTRUEPARAMSDIR + "{dataType}/{datasetName}/monovar.vcf.gz"),
        filtered=protected(MONOVARTRUEPARAMSDIR + "{dataType}/{datasetName}/filtered.vcf")
    shell:
        "bgzip -c {input} > {output.gz} && "
        "tabix -p vcf {output.gz} && "
        "bcftools filter "
        "--include \"FILTER='PASS'\" "
        "--output-type v "
        "--output {output.filtered} "
        "{output.gz}"

# Rule: get variant calling information from MONOVAR with TRUE parameters
rule getMonovarVarInfoTrueParams:
    input:
        MONOVARTRUEPARAMSDIR + "{dataType}/{datasetName}/filtered.vcf"
    output:
        cellNames=protected(MONOVARTRUEPARAMSDIR + "{dataType}/{datasetName}/post_processed/filtered.cell_names"),
        lociInfo=protected(MONOVARTRUEPARAMSDIR + "{dataType}/{datasetName}/post_processed/filtered.loci_info"),
        genotypes=protected(MONOVARTRUEPARAMSDIR + "{dataType}/{datasetName}/post_processed/filtered.genotypes"),
        ternary=protected(MONOVARTRUEPARAMSDIR + "{dataType}/{datasetName}/post_processed/filtered.ternary"),
        genotypeProbs=protected(MONOVARTRUEPARAMSDIR + "{dataType}/{datasetName}/post_processed/filtered.genotype_probs"),
        sifitData=protected(MONOVARTRUEPARAMSDIR + "{dataType}/{datasetName}/post_processed/filtered.sifit_data"),
        sifitCellNames=protected(MONOVARTRUEPARAMSDIR + "{dataType}/{datasetName}/post_processed/filtered.sifit_cell_names")
    params:
        prefix=MONOVARTRUEPARAMSDIR + "{dataType}/{datasetName}/post_processed/filtered"
    shell:
        "python scripts/extract_info_from_vcf.py "
        "--mode monovar "
        "--prefix {params.prefix} "
        "--sifit t "
        "{input}"


########################################################
#       Get variant calling results from MONOVAR       #
########################################################

# Rule: gather filtered variant calling results from MONOVAR working with TRUE parameters
rule gatherMonovarVarResultsTrueParams:
    input:
        cellNames=expand(MONOVARTRUEPARAMSDIR + "{dataType}/{datasetName}/post_processed/filtered.cell_names", dataType=SIMUDATATYPES, datasetName=SIMUDATASETNAMES),
        lociInfo=expand(MONOVARTRUEPARAMSDIR + "{dataType}/{datasetName}/post_processed/filtered.loci_info", dataType=SIMUDATATYPES, datasetName=SIMUDATASETNAMES),
        genotypes=expand(MONOVARTRUEPARAMSDIR + "{dataType}/{datasetName}/post_processed/filtered.genotypes", dataType=SIMUDATATYPES, datasetName=SIMUDATASETNAMES),
        ternary=expand(MONOVARTRUEPARAMSDIR + "{dataType}/{datasetName}/post_processed/filtered.ternary", dataType=SIMUDATATYPES, datasetName=SIMUDATASETNAMES),
        genotypeProbs=expand(MONOVARTRUEPARAMSDIR + "{dataType}/{datasetName}/post_processed/filtered.genotype_probs", dataType=SIMUDATATYPES, datasetName=SIMUDATASETNAMES),
        trueCellNames=SIMUTUMORCELLNAMES,
        trueSNVSites=expand(SIMUDATATYPESDIR + "{dataType}/{datasetName}/" + config["benchmark"]["simulation"]["trueSNVSitesNamesPre"], dataType=SIMUDATATYPES, datasetName=SIMUDATASETNAMES),
        trueSNVGenotypesNU=expand(SIMUDATATYPESDIR + "{dataType}/{datasetName}/" + config["benchmark"]["simulation"]["trueSNVGenotypesNUPre"], dataType=SIMUDATATYPES, datasetName=SIMUDATASETNAMES),
        trueSNVGenotypesTer=expand(SIMUDATATYPESDIR + "{dataType}/{datasetName}/" + config["benchmark"]["simulation"]["trueSNVGenotypesTerPre"] + '.simple', dataType=SIMUDATATYPES, datasetName=SIMUDATASETNAMES)
    output:
        protected(ANALYSISVARCALLDIR + "from_monovar_" + config["benchmark"]["analysis"]["trueParameters"] + ".tsv")
    params:
        forSieve=False,
        mergedDuplicateLines=False,
        datasetNames=SIMUDATASETNAMES,
        tool="monovar",
        snvType=None,
        toolSetup=config["benchmark"]["analysis"]["trueParameters"],
        fineTuneType=None,
        dataType=SIMUDATATYPES,
        cellNum=config["benchmark"]["analysis"]["cellNum"],
        covMean=config["benchmark"]["analysis"]["covMean"],
        covVariance=config["benchmark"]["analysis"]["covVariance"],
        effSeqErrRate=config["benchmark"]["analysis"]["effSeqErrRate"],
        adoRate=config["benchmark"]["analysis"]["adoRate"],
        deletionRate=config["benchmark"]["analysis"]["deletionRate"],
        insertionRate=config["benchmark"]["analysis"]["insertionRate"]
    script:
        "scripts/gather_variant_calling_results_part.py"

