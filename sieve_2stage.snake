import shutil

include: "scripts/constants.py"
include: "scripts/utils.py"

#########################################################
#              Get simulated dataset names              #
#########################################################

SIMUDATASETNAMES = get_dataset_names(SIMUSNVSITESDIR)


#######################################################
#                                                     #
#               SIEVE - From candidates               #
#                                                     #
#######################################################


#######################################################
#          SIEVE - From candidates - Stage 1          #
#######################################################

# Rule: select candidate SNVs with datafilter
rule selectCandidateSNVsForSieve:
    input:
        data=SIMUMPILEUPDATADIR + "{datasetName}/" + SIMUMPILEUPWITHOUTNORMAL,
        bamNames=SIMUSCIPHIDIR + config["benchmark"]["simulation"]["bamFileNamesWithoutNormal"]
    output:
        protected(SIEVEFROMCANDIDATEPHYINFDIR + "{sieveRunTemplates}/{datasetName}/readCounts.tsv")
    params:
        dataFilter=config["tools"]["dataFilter"]
    shell:
        "{params.dataFilter} "
        "--cellNames {input.bamNames} "
        "--in {input.data} "
        "-o {output}"

# Rule: integrate reads data from candidates into templates for SIEVE
rule integrateCandidateSNVsForSieve:
    input: 
        SIEVEFROMCANDIDATEPHYINFDIR + "{sieveRunTemplates}/{datasetName}/readCounts.tsv"
    output: 
        protected(SIEVEFROMCANDIDATEPHYINFDIR + "{sieveRunTemplates}/{datasetName}/{sieveRunTemplates}_{datasetName}" + config["configFiles"]["sieve"]["suffix"])
    params:
        dataCollector=config["tools"]["applauncher"] + " DataCollectorLauncher",
        templates=config["configFiles"]["sieve"]["dir"] + "{sieveRunTemplates}" + config["configFiles"]["sieve"]["suffix"]
    shell: 
        "{params.dataCollector} "
        "-cell {SIMUTUMORCELLNAMES} "
        "-data {input} "
        "-template {params.templates} "
        "-out {output}"

# Rule: perfrom phylogenetic inference with SIEVE using Sciphi candicate SNVs
rule runSieveWithCandidateSNVsPhyloInf:
    input: 
        rawData=SIEVEFROMCANDIDATEPHYINFDIR + "{sieveRunTemplates}/{datasetName}/readCounts.tsv",
        configuredData=SIEVEFROMCANDIDATEPHYINFDIR + "{sieveRunTemplates}/{datasetName}/{sieveRunTemplates}_{datasetName}" + config["configFiles"]["sieve"]["suffix"]
    output: 
        trees=protected(SIEVEFROMCANDIDATEPHYINFDIR + "{sieveRunTemplates}/{datasetName}/{sieveRunTemplates}_{datasetName}.trees"),
        mcmclog=protected(SIEVEFROMCANDIDATEPHYINFDIR + "{sieveRunTemplates}/{datasetName}/{sieveRunTemplates}_{datasetName}.log"),
        state=protected(SIEVEFROMCANDIDATEPHYINFDIR + "{sieveRunTemplates}/{datasetName}/{sieveRunTemplates}_{datasetName}" + config["configFiles"]["sieve"]["suffix"] + ".state")
    params:
        beast=config["tools"]["beast"],
        seed=config["fineTune"]["beast"]["seed"],
        prefix=SIEVEFROMCANDIDATEPHYINFDIR + "{sieveRunTemplates}/{datasetName}/",
        log=SIEVEFROMCANDIDATEPHYINFDIR + "{sieveRunTemplates}/{datasetName}/out"
    threads:
        lambda wildcards, input: get_thread_num_for_sieve(input.rawData, config["fineTune"]["beast"]["nrOfSitesPerThreadStage1"])
    priority:
        50
    shell:
        "{params.beast} "
        "-overwrite "
        "-seed {params.seed} "
        "-threads {threads} "
        "-prefix {params.prefix} "
        "{input.configuredData} " 
        "&>{params.log}"

# Rule: perfrom tree annotation with SIEVE using Sciphi candicate SNVs
rule runSieveWithCandidateSNVsTreeAnnotation:
    input: 
        SIEVEFROMCANDIDATEPHYINFDIR + "{sieveRunTemplates}/{datasetName}/{sieveRunTemplates}_{datasetName}.trees"
    output: 
        tree=protected(SIEVEFROMCANDIDATEPHYINFDIR + "{sieveRunTemplates}/{datasetName}/{sieveRunTemplates}_{datasetName}.tree"),
        simpleTree=protected(SIEVEFROMCANDIDATEPHYINFDIR + "{sieveRunTemplates}/{datasetName}/{sieveRunTemplates}_{datasetName}_simple.tree")
    params:
        treeAnnotator=config["tools"]["applauncher"] + " ScsTreeAnnotatorLauncher",
        burnIn=config["fineTune"]["treeAnnotator"]["burnIn"],
        log=SIEVEFROMCANDIDATEPHYINFDIR + "{sieveRunTemplates}/{datasetName}/process_tree.out"
    shell: 
        "{params.treeAnnotator} "
        "-burnin {params.burnIn} "
        "-simpleTree "
        "{input} "
        "{output.tree} "
        "&>{params.log}"

# Rule: perfrom variant calling with SIEVE using Sciphi candicate SNVs
rule runSieveWithCandidateSNVsVarCall:
    input: 
        mcmclog=SIEVEFROMCANDIDATEPHYINFDIR + "{sieveRunTemplates}/{datasetName}/{sieveRunTemplates}_{datasetName}.log",
        config=SIEVEFROMCANDIDATEPHYINFDIR + "{sieveRunTemplates}/{datasetName}/{sieveRunTemplates}_{datasetName}" + config["configFiles"]["sieve"]["suffix"],
        tree=SIEVEFROMCANDIDATEPHYINFDIR + "{sieveRunTemplates}/{datasetName}/{sieveRunTemplates}_{datasetName}.tree"
    output: 
        estimates=protected(SIEVEFROMCANDIDATEVARCALDIR + "{sieveRunTemplates}/{datasetName}/{sieveRunTemplates}_{datasetName}.estimates"),
        files=protected(SIEVEFROMCANDIDATEVARCALDIR + "{sieveRunTemplates}/{datasetName}/files")
    params:
        variantCaller=config["tools"]["applauncher"] + " VariantCallerLauncher",
        burnIn=config["fineTune"]["variantCaller"]["burnIn"],
        estimates=config["fineTune"]["variantCaller"]["estimates"],
        prefix=SIEVEFROMCANDIDATEVARCALDIR + "{sieveRunTemplates}/{datasetName}/"
    threads:
        config["fineTune"]["variantCaller"]["threads"]
    shell: 
        "{params.variantCaller} "
        "-details "
        "-burnin {params.burnIn} "
        "-threads {threads} "
        "-estimates {params.estimates} "
        "-mcmclog {input.mcmclog} "
        "-config {input.config} "
        "-tree {input.tree} "
        "-prefix {params.prefix} "
        "&>{params.prefix}out; "
        "ls {params.prefix} > {output.files}"


#######################################################
#          SIEVE - From candidates - Stage 2          #
#######################################################

# Rule: update templates for stage 2 from results of stage 1
rule updateStage2ConfigCandidateSNVsForSieve:
    input:
        estimates=SIEVEFROMCANDIDATEVARCALDIR + "{sieveRunTemplatesStage1}/{datasetName}/{sieveRunTemplatesStage1}_{datasetName}.estimates",
        files=SIEVEFROMCANDIDATEVARCALDIR + "{sieveRunTemplatesStage1}/{datasetName}/files",
        simpleTree=SIEVEFROMCANDIDATEPHYINFDIR + "{sieveRunTemplatesStage1}/{datasetName}/{sieveRunTemplatesStage1}_{datasetName}_simple.tree"
    output:
        protected(SIEVEFROMCANDIDATEPHYINFSTAGE2DIR + "{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}/{datasetName}/stage2_template" + config["configFiles"]["sieve"]["suffix"])
    params:
        template1=config["configFiles"]["sieve"]["dir"] + "{sieveRunTemplatesStage1}" + config["configFiles"]["sieve"]["suffix"],
        template2=config["configFiles"]["sieve"]["dir"] + "{sieveRunTemplatesStage2}" + config["configFiles"]["sieve"]["suffix"]
    shell:
        "python scripts/set_up_stage2_from_stage1.py "
        "--tree {input.simpleTree} "
        "--estimates {input.estimates} "
        "--results {input.files} "
        "--template1 {params.template1} "
        "--template2 {params.template2} "
        "--out {output}"

# Rule: integrate reads data from Sciphi candicate SNVs into templates for stage 2 for SIEVE
rule integrateStage2CandidateSNVsForSieve:
    input: 
        data=SIEVEFROMCANDIDATEPHYINFDIR + "{sieveRunTemplatesStage1}/{datasetName}/readCounts.tsv",
        template=SIEVEFROMCANDIDATEPHYINFSTAGE2DIR + "{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}/{datasetName}/stage2_template" + config["configFiles"]["sieve"]["suffix"]
    output: 
        protected(SIEVEFROMCANDIDATEPHYINFSTAGE2DIR + "{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}/{datasetName}/{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}_{datasetName}" + config["configFiles"]["sieve"]["suffix"])
    params:
        dataCollector=config["tools"]["applauncher"] + " DataCollectorLauncher",
    shell: 
        "{params.dataCollector} "
        "-cell {SIMUTUMORCELLNAMES} "
        "-data {input.data} "
        "-template {input.template} "
        "-out {output}"

# Rule: perfrom phylogenetic inference for stage 2 with SIEVE using Sciphi candicate SNVs
rule runSieveWithCandidateSNVsPhyloInfStage2:
    input: 
        rawData=SIEVEFROMCANDIDATEPHYINFDIR + "{sieveRunTemplatesStage1}/{datasetName}/readCounts.tsv",
        configuredData=SIEVEFROMCANDIDATEPHYINFSTAGE2DIR + "{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}/{datasetName}/{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}_{datasetName}" + config["configFiles"]["sieve"]["suffix"]
    output: 
        trees=protected(SIEVEFROMCANDIDATEPHYINFSTAGE2DIR + "{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}/{datasetName}/{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}_{datasetName}.trees"),
        mcmclog=protected(SIEVEFROMCANDIDATEPHYINFSTAGE2DIR + "{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}/{datasetName}/{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}_{datasetName}.log"),
        state=protected(SIEVEFROMCANDIDATEPHYINFSTAGE2DIR + "{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}/{datasetName}/{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}_{datasetName}" + config["configFiles"]["sieve"]["suffix"] + ".state")
    params:
        beast=config["tools"]["beast"],
        seed=config["fineTune"]["beast"]["seed"],
        prefix=SIEVEFROMCANDIDATEPHYINFSTAGE2DIR + "{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}/{datasetName}/",
        log=SIEVEFROMCANDIDATEPHYINFSTAGE2DIR + "{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}/{datasetName}/out"
    threads:
        lambda wildcards, input: get_thread_num_for_sieve(input.rawData, config["fineTune"]["beast"]["nrOfSitesPerThreadStage2"])
    shell:
        "{params.beast} "
        "-overwrite "
        "-seed {params.seed} "
        "-threads {threads} "
        "-prefix {params.prefix} "
        "{input.configuredData} " 
        "&>{params.log}"

# Rule: perfrom tree annotation for stage 2 with SIEVE using Sciphi candicate SNVs
rule runSieveWithCandidateSNVsTreeAnnotationStage2:
    input: 
        SIEVEFROMCANDIDATEPHYINFSTAGE2DIR + "{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}/{datasetName}/{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}_{datasetName}.trees"
    output: 
        tree=protected(SIEVEFROMCANDIDATEPHYINFSTAGE2DIR + "{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}/{datasetName}/{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}_{datasetName}.tree"),
        simpleTree=protected(SIEVEFROMCANDIDATEPHYINFSTAGE2DIR + "{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}/{datasetName}/{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}_{datasetName}_simple.tree")
    params:
        treeAnnotator=config["tools"]["applauncher"] + " ScsTreeAnnotatorLauncher",
        burnIn=config["fineTune"]["treeAnnotator"]["burnIn"],
        log=SIEVEFROMCANDIDATEPHYINFSTAGE2DIR + "{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}/{datasetName}/process_tree.out"
    shell: 
        "{params.treeAnnotator} "
        "-burnin {params.burnIn} "
        "-simpleTree "
        "{input} "
        "{output.tree} "
        "&>{params.log}"

# Rule: perfrom variant calling for stage 2 with SIEVE using Sciphi candicate SNVs
rule runSieveWithCandidateSNVsVarCallStage2:
    input: 
        mcmclog=SIEVEFROMCANDIDATEPHYINFSTAGE2DIR + "{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}/{datasetName}/{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}_{datasetName}.log",
        config=SIEVEFROMCANDIDATEPHYINFSTAGE2DIR + "{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}/{datasetName}/{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}_{datasetName}" + config["configFiles"]["sieve"]["suffix"],
        tree=SIEVEFROMCANDIDATEPHYINFSTAGE2DIR + "{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}/{datasetName}/{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}_{datasetName}.tree"
    output: 
        estimates=protected(SIEVEFROMCANDIDATEVARCALSTAGE2DIR + "{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}/{datasetName}/{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}_{datasetName}.estimates"),
        files=protected(SIEVEFROMCANDIDATEVARCALSTAGE2DIR + "{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}/{datasetName}/stage2_files")
    params:
        variantCaller=config["tools"]["applauncher"] + " VariantCallerLauncher",
        burnIn=config["fineTune"]["variantCaller"]["burnIn"],
        prefix=SIEVEFROMCANDIDATEVARCALSTAGE2DIR + "{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}/{datasetName}/"
    threads:
        config["fineTune"]["variantCaller"]["threads"]
    shell: 
        "{params.variantCaller} "
        "-details "
        "-burnin {params.burnIn} "
        "-threads {threads} "
        "-estimates median "
        "-mcmclog {input.mcmclog} "
        "-config {input.config} "
        "-tree {input.tree} "
        "-prefix {params.prefix} "
        "&>{params.prefix}out; "
        "ls {params.prefix} > {output.files}"


#######################################################
#               Gather trees from SIEVE               #
#######################################################

# Rule: gather inferred trees from SIEVE with candidate SNVs
rule gatherSieveTreesWithCandidateSNVs:
    input:
        inferredTrees = expand(SIEVEFROMCANDIDATEPHYINFDIR + "{sieveRunTemplates}/{datasetName}/{sieveRunTemplates}_{datasetName}_simple.tree",
                sieveRunTemplates=config["configFiles"]["sieve"]["fileNames"], datasetName=SIMUDATASETNAMES),
        trueTrees = expand(SIMUCONVERTEDTRUETREEDIR + config["benchmark"]["simulation"]["treesWithTrunkWithoutNormalDir"] + config["benchmark"]["simulation"]["treesPre"] + ".{datasetName}", datasetName=SIMUDATASETNAMES)
    output:
        ANALYSISTREECOMPDIR + "from_sieve_" + config["benchmark"]["analysis"]["candidateSNVs"] + ".tsv"
    params:
        forSieve=True,
        sieveRunTemplates=config["configFiles"]["sieve"]["fileNames"],
        datasetNames=SIMUDATASETNAMES,
        trueTreesDir=SIMUCONVERTEDTRUETREEDIR + config["benchmark"]["simulation"]["treesWithTrunkWithoutNormalDir"],
        trueTreesPre=config["benchmark"]["simulation"]["treesPre"],
        tool="sieve",
        snvType=config["benchmark"]["analysis"]["candidateSNVs"],
        cellNum=config["benchmark"]["analysis"]["cellNum"],
        covMean=config["benchmark"]["analysis"]["covMean"],
        covVariance=config["benchmark"]["analysis"]["covVariance"],
        effSeqErrRate=config["benchmark"]["analysis"]["effSeqErrRate"],
        adoRate=config["benchmark"]["analysis"]["adoRate"],
        deletionRate=config["benchmark"]["analysis"]["deletionRate"],
        insertionRate=config["benchmark"]["analysis"]["insertionRate"]
    conda:
        "scripts/envs/pandas.yaml"
    script:
        "scripts/gather_inferred_trees_part.py"

# Rule: gather inferred trees from SIEVE stage 2 with candidate SNVs
rule gatherSieveStage2TreesWithCandidateSNVs:
    input:
        inferredTrees = expand(SIEVEFROMCANDIDATEPHYINFSTAGE2DIR + "{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}/{datasetName}/{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}_{datasetName}_simple.tree",
                sieveRunTemplatesStage1=config["configFiles"]["sieve"]["stage1FileNames"], 
                sieveRunTemplatesStage2=config["configFiles"]["sieve"]["stage2FileNames"], 
                datasetName=SIMUDATASETNAMES),
        trueTrees = expand(SIMUCONVERTEDTRUETREEDIR + config["benchmark"]["simulation"]["treesWithTrunkWithoutNormalDir"] + config["benchmark"]["simulation"]["treesPre"] + ".{datasetName}", datasetName=SIMUDATASETNAMES)
    output:
        ANALYSISTREECOMPDIR + "from_sieve_stage2_" + config["benchmark"]["analysis"]["candidateSNVs"] + ".tsv"
    params:
        forSieve=True,
        sieveRunTemplates=expand("{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}", sieveRunTemplatesStage1=config["configFiles"]["sieve"]["stage1FileNames"], sieveRunTemplatesStage2=config["configFiles"]["sieve"]["stage2FileNames"]),
        datasetNames=SIMUDATASETNAMES,
        trueTreesDir=SIMUCONVERTEDTRUETREEDIR + config["benchmark"]["simulation"]["treesWithTrunkWithoutNormalDir"],
        trueTreesPre=config["benchmark"]["simulation"]["treesPre"],
        tool="sieve",
        snvType=config["benchmark"]["analysis"]["candidateSNVs"],
        cellNum=config["benchmark"]["analysis"]["cellNum"],
        covMean=config["benchmark"]["analysis"]["covMean"],
        covVariance=config["benchmark"]["analysis"]["covVariance"],
        effSeqErrRate=config["benchmark"]["analysis"]["effSeqErrRate"],
        adoRate=config["benchmark"]["analysis"]["adoRate"],
        deletionRate=config["benchmark"]["analysis"]["deletionRate"],
        insertionRate=config["benchmark"]["analysis"]["insertionRate"]
    conda:
        "scripts/envs/pandas.yaml"
    script:
        "scripts/gather_inferred_trees_part.py"


########################################################
#               Get estimates from SIEVE               #
########################################################

# Rule: get parameter estimates from SIEVE with candidate SNVs
rule getSieveParamsWithCandidateSNVs:
    input: 
        expand(SIEVEFROMCANDIDATEVARCALDIR + "{sieveRunTemplates}/{datasetName}/{sieveRunTemplates}_{datasetName}.estimates", sieveRunTemplates=config["configFiles"]["sieve"]["fileNames"], datasetName=SIMUDATASETNAMES)
    output: 
        ANALYSISPARAMSDIR + "from_sieve_" + config["benchmark"]["analysis"]["candidateSNVs"] + ".tsv"
    params:
        cellNum=config["benchmark"]["analysis"]["cellNum"],
        covMean=config["benchmark"]["analysis"]["covMean"],
        covVariance=config["benchmark"]["analysis"]["covVariance"],
        configTemplates=config["configFiles"]["sieve"]["fileNames"],
        datasetNames=SIMUDATASETNAMES,
        tool="sieve",
        snvType=config["benchmark"]["analysis"]["candidateSNVs"],
        estimatesType=config["fineTune"]["variantCaller"]["estimates"]
    conda:
        "scripts/envs/pandas.yaml"
    script:
        "scripts/get_param_estimates_sieve.py"

# Rule: get parameter estimates from SIEVE stage 2 with candidate SNVs
rule getSieveStage2ParamsWithCandidateSNVs:
    input: 
        expand(SIEVEFROMCANDIDATEVARCALSTAGE2DIR + "{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}/{datasetName}/{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}_{datasetName}.estimates",
                sieveRunTemplatesStage1=config["configFiles"]["sieve"]["stage1FileNames"], 
                sieveRunTemplatesStage2=config["configFiles"]["sieve"]["stage2FileNames"], 
                datasetName=SIMUDATASETNAMES)
    output: 
        ANALYSISPARAMSDIR + "from_sieve_stage2_" + config["benchmark"]["analysis"]["candidateSNVs"] + ".tsv"
    params:
        cellNum=config["benchmark"]["analysis"]["cellNum"],
        covMean=config["benchmark"]["analysis"]["covMean"],
        covVariance=config["benchmark"]["analysis"]["covVariance"],
        configTemplates=expand("{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}", sieveRunTemplatesStage1=config["configFiles"]["sieve"]["stage1FileNames"], sieveRunTemplatesStage2=config["configFiles"]["sieve"]["stage2FileNames"]),
        datasetNames=SIMUDATASETNAMES,
        tool="sieve",
        snvType=config["benchmark"]["analysis"]["candidateSNVs"],
        estimatesType=config["fineTune"]["variantCaller"]["estimates"]
    conda:
        "scripts/envs/pandas.yaml"
    script:
        "scripts/get_param_estimates_sieve.py"


########################################################
#        Get variant calling results from SIEVE        #
########################################################

# Rule: gather variant calling results from SIEVE with candidate SNVs
rule gatherSieveVarResultsCandidateSNVs:
    input: 
        expand(SIEVEFROMCANDIDATEVARCALDIR + "{sieveRunTemplates}/{datasetName}/files", sieveRunTemplates=config["configFiles"]["sieve"]["fileNames"], datasetName=SIMUDATASETNAMES)
    output: 
        ANALYSISVARCALLDIR + "from_sieve_" + config["benchmark"]["analysis"]["candidateSNVs"] + ".tsv"
    params:
        forSieve=True,
        mergedDuplicateLines=False,
        sieveRunTemplates=config["configFiles"]["sieve"]["fileNames"],
        datasetNames=SIMUDATASETNAMES,
        tool="sieve",
        snvType=config["benchmark"]["analysis"]["candidateSNVs"],
        trueCellNames=SIMUTUMORCELLNAMES,
        trueLociInfoPre=SIMUSNVSITESDIR + config["benchmark"]["simulation"]["trueSNVSitesNamesPre"],
        trueGenotypesNUPre=SIMUTRUESNVDIR + config["benchmark"]["simulation"]["trueSNVGenotypesNUPre"],
        trueGenotypesTerPre=SIMUTRUESNVDIR + config["benchmark"]["simulation"]["trueSNVGenotypesTerPre"],
        cellNum=config["benchmark"]["analysis"]["cellNum"],
        covMean=config["benchmark"]["analysis"]["covMean"],
        covVariance=config["benchmark"]["analysis"]["covVariance"],
        effSeqErrRate=config["benchmark"]["analysis"]["effSeqErrRate"],
        adoRate=config["benchmark"]["analysis"]["adoRate"],
        deletionRate=config["benchmark"]["analysis"]["deletionRate"],
        insertionRate=config["benchmark"]["analysis"]["insertionRate"]
    conda:
        "scripts/envs/pandas.yaml"
    script:
        "scripts/gather_variant_calling_results_part.py"

# Rule: gather variant calling results from SIEVE stage 2 with candidate SNVs
rule gatherSieveStage2VarResultsCandidateSNVs:
    input: 
        expand(SIEVEFROMCANDIDATEVARCALSTAGE2DIR + "{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}/{datasetName}/stage2_files",
                sieveRunTemplatesStage1=config["configFiles"]["sieve"]["stage1FileNames"], 
                sieveRunTemplatesStage2=config["configFiles"]["sieve"]["stage2FileNames"], 
                datasetName=SIMUDATASETNAMES)
    output: 
        ANALYSISVARCALLDIR + "from_sieve_stage2_" + config["benchmark"]["analysis"]["candidateSNVs"] + ".tsv"
    params:
        forSieve=True,
        mergedDuplicateLines=False,
        sieveRunTemplates=expand("{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}", sieveRunTemplatesStage1=config["configFiles"]["sieve"]["stage1FileNames"], sieveRunTemplatesStage2=config["configFiles"]["sieve"]["stage2FileNames"]),
        datasetNames=SIMUDATASETNAMES,
        tool="sieve",
        snvType=config["benchmark"]["analysis"]["candidateSNVs"],
        trueCellNames=SIMUTUMORCELLNAMES,
        trueLociInfoPre=SIMUSNVSITESDIR + config["benchmark"]["simulation"]["trueSNVSitesNamesPre"],
        trueGenotypesNUPre=SIMUTRUESNVDIR + config["benchmark"]["simulation"]["trueSNVGenotypesNUPre"],
        trueGenotypesTerPre=SIMUTRUESNVDIR + config["benchmark"]["simulation"]["trueSNVGenotypesTerPre"],
        cellNum=config["benchmark"]["analysis"]["cellNum"],
        covMean=config["benchmark"]["analysis"]["covMean"],
        covVariance=config["benchmark"]["analysis"]["covVariance"],
        effSeqErrRate=config["benchmark"]["analysis"]["effSeqErrRate"],
        adoRate=config["benchmark"]["analysis"]["adoRate"],
        deletionRate=config["benchmark"]["analysis"]["deletionRate"],
        insertionRate=config["benchmark"]["analysis"]["insertionRate"]
    conda:
        "scripts/envs/pandas.yaml"
    script:
        "scripts/gather_variant_calling_results_part.py"


########################################################
#          Get ADO calling results from SIEVE          #
########################################################

# Rule: gather ADO calling results from SIEVE with candidate SNVs
rule gatherSieveAdoResultsCandidateSNVs:
    input: 
        expand(SIEVEFROMCANDIDATEVARCALDIR + "{sieveRunTemplates}/{datasetName}/files", sieveRunTemplates=config["configFiles"]["sieve"]["fileNames"], datasetName=SIMUDATASETNAMES)
    output: 
        protected(ANALYSISADOCALLDIR + "from_sieve_" + config["benchmark"]["analysis"]["candidateSNVs"] + ".tsv")
    params:
        sieveRunTemplates=config["configFiles"]["sieve"]["fileNames"],
        datasetNames=SIMUDATASETNAMES,
        tool="sieve",
        snvType=config["benchmark"]["analysis"]["candidateSNVs"],
        trueCellNames=SIMUTUMORCELLNAMES,
        trueAdoStatesPre=SIMUTRUEADOSTATESDIR + config["benchmark"]["simulation"]["trueAdoStatesPre"],
        cellNum=config["benchmark"]["analysis"]["cellNum"],
        covMean=config["benchmark"]["analysis"]["covMean"],
        covVariance=config["benchmark"]["analysis"]["covVariance"],
        effSeqErrRate=config["benchmark"]["analysis"]["effSeqErrRate"],
        adoRate=config["benchmark"]["analysis"]["adoRate"],
        deletionRate=config["benchmark"]["analysis"]["deletionRate"],
        insertionRate=config["benchmark"]["analysis"]["insertionRate"]
    conda:
        "scripts/envs/pandas.yaml"
    script:
        "scripts/gather_ado_calling_results_part.py"

# Rule: gather ADO calling results from SIEVE stage 2 with candidate SNVs
rule gatherSieveStage2AdoResultsCandidateSNVs:
    input: 
        expand(SIEVEFROMCANDIDATEVARCALSTAGE2DIR + "{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}/{datasetName}/stage2_files",
                sieveRunTemplatesStage1=config["configFiles"]["sieve"]["stage1FileNames"], 
                sieveRunTemplatesStage2=config["configFiles"]["sieve"]["stage2FileNames"], 
                datasetName=SIMUDATASETNAMES)
    output: 
        protected(ANALYSISADOCALLDIR + "from_sieve_stage2_" + config["benchmark"]["analysis"]["candidateSNVs"] + ".tsv")
    params:
        sieveRunTemplates=expand("{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}", sieveRunTemplatesStage1=config["configFiles"]["sieve"]["stage1FileNames"], sieveRunTemplatesStage2=config["configFiles"]["sieve"]["stage2FileNames"]),
        datasetNames=SIMUDATASETNAMES,
        tool="sieve",
        snvType=config["benchmark"]["analysis"]["candidateSNVs"],
        trueCellNames=SIMUTUMORCELLNAMES,
        trueAdoStatesPre=SIMUTRUEADOSTATESDIR + config["benchmark"]["simulation"]["trueAdoStatesPre"],
        cellNum=config["benchmark"]["analysis"]["cellNum"],
        covMean=config["benchmark"]["analysis"]["covMean"],
        covVariance=config["benchmark"]["analysis"]["covVariance"],
        effSeqErrRate=config["benchmark"]["analysis"]["effSeqErrRate"],
        adoRate=config["benchmark"]["analysis"]["adoRate"],
        deletionRate=config["benchmark"]["analysis"]["deletionRate"],
        insertionRate=config["benchmark"]["analysis"]["insertionRate"]
    conda:
        "scripts/envs/pandas.yaml"
    script:
        "scripts/gather_ado_calling_results_part.py"


#######################################################
#        Gather the number of sites from SIEVE        #
#######################################################

rule gatherSitesInfoSieve:
    input:
        data=expand(SIEVEFROMCANDIDATEPHYINFDIR + "{sieveRunTemplatesStage1}/{datasetName}/readCounts.tsv", sieveRunTemplatesStage1=config["configFiles"]["sieve"]["stage1FileNames"], datasetName=SIMUDATASETNAMES),
        treeInfo=ANALYSISTREECOMPDIR + "trees_info_updated.tsv"
    output:
        protected(ANALYSISTREECOMPDIR + "sieve_sites_info.tsv")
    conda:
        "scripts/envs/pandas.yaml"
    script:
        "scripts/gather_sites_info.py"


########################################################
#                                                      #
#          Get allelic information from SIEVE          #
#                                                      #
########################################################

# Rule: generate allelic information per cell from true allelic sequencing information and true size factorand SIEVE results
rule generateAllelicInfoPerCell:
    input:
        cellNames=SIMUTUMORCELLNAMES,
        trueSizeFactors=SIMUTRUESIZEFACTORSDIR + config["benchmark"]["simulation"]["trueSizeFactorsPre"] + ".{datasetName}",
        trueAllelicSeqInfo=SIMUALLELICSEQINFODIR + config["benchmark"]["simulation"]["trueAllelicSeqInfoSNVsPre"] + ".{datasetName}",
        sieveVarCallFiles=SIEVEFROMCANDIDATEVARCALSTAGE2DIR + "{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}/{datasetName}/stage2_files"
    output:
        protected(SIEVEFROMCANDIDATEVARCALSTAGE2DIR + "{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}/{datasetName}/allelic_info.rds")
    params:
        tool="sieve",
        sieveRunTemplate=lambda wildcards: "{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}".format(sieveRunTemplatesStage1=wildcards.sieveRunTemplatesStage1, sieveRunTemplatesStage2=wildcards.sieveRunTemplatesStage2),
        datasetLabel=lambda wildcards: "{datasetName}".format(datasetName=wildcards.datasetName),
        cellNum=config["benchmark"]["analysis"]["cellNum"],
        covMean=config["benchmark"]["analysis"]["covMean"],
        covVariance=config["benchmark"]["analysis"]["covVariance"],
        effSeqErrRate=config["benchmark"]["analysis"]["effSeqErrRate"],
        adoRate=config["benchmark"]["analysis"]["adoRate"],
        deletionRate=config["benchmark"]["analysis"]["deletionRate"],
        insertionRate=config["benchmark"]["analysis"]["insertionRate"]
    script:
        "scripts/generate_allelic_info_per_cell.R"

# Rule: combine allelic information per cell from all datasets
rule combineAllelicInfoPerCell:
    input:
        expand(SIEVEFROMCANDIDATEVARCALSTAGE2DIR + "{sieveRunTemplatesStage1}-{sieveRunTemplatesStage2}/{datasetName}/allelic_info.rds",
                sieveRunTemplatesStage1=config["configFiles"]["sieve"]["stage1FileNames"], 
                sieveRunTemplatesStage2=config["configFiles"]["sieve"]["stage2FileNames"], 
                datasetName=SIMUDATASETNAMES)
    output:
        protected(ANALYSISALLELICINFO + "allelic_info.rds")
    script:
        "scripts/combine_allelic_info.R"

